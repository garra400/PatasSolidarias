import mongoose from 'mongoose';

// Configurar Mongoose para melhor performance
mongoose.set('strictQuery', false);
mongoose.set('bufferCommands', false); // Desabilitar buffering de comandos
mongoose.set('bufferTimeoutMS', 10000); // Timeout de 10s

export const connectDB = async () => {
    try {
        // Remover op√ß√µes deprecadas
        const conn = await mongoose.connect(process.env.MONGODB_URI, {
            serverSelectionTimeoutMS: 5000, // Timeout de sele√ß√£o de servidor
            socketTimeoutMS: 45000, // Timeout de socket
        });

        console.log(`‚úÖ Conectado ao MongoDB Atlas com sucesso!`);
        console.log(`üìç Host: ${conn.connection.host}`);
        console.log(`üìÅ Database: ${conn.connection.name}`);

        // Verificar se a conex√£o est√° realmente pronta
        if (mongoose.connection.readyState === 1) {
            console.log(`‚úÖ Database dispon√≠vel globalmente`);
        }

        // Listeners de eventos da conex√£o
        mongoose.connection.on('error', (err) => {
            console.error(`‚ùå Erro na conex√£o MongoDB: ${err.message}`);
        });

        mongoose.connection.on('disconnected', () => {
            console.log('‚ö†Ô∏è MongoDB desconectado');
        });

        mongoose.connection.on('reconnected', () => {
            console.log('‚úÖ MongoDB reconectado');
        });

        return conn;
    } catch (error) {
        console.error(`‚ùå Erro ao conectar MongoDB: ${error.message}`);
        console.error('üí° Verifique se:');
        console.error('   1. MongoDB est√° rodando');
        console.error('   2. MONGODB_URI est√° correta no .env');
        console.error('   3. Seu IP est√° na whitelist do MongoDB Atlas');
        process.exit(1);
    }
};
